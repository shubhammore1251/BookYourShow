// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean?  @default(false)
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Theater {
  id          Int       @id @default(autoincrement())
  name        String
  location    String
  city        String
  address     String
  screens     Screen[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Screen {
  id          Int       @id @default(autoincrement())
  name        String
  type        String      // IMAX 2D, Dolby Atmos, etc
  totalSeats  Int
  theater     Theater     @relation(fields: [theaterId], references: [id])
  theaterId   Int
  shows       Show[]
}

model Show {
  id          Int       @id @default(autoincrement())
  movieId     Int        // TMDB movie ID (external)
  language    String
  date        DateTime
  startTime   String
  endTime     String?
  screen      Screen     @relation(fields: [screenId], references: [id])
  screenId    Int
  price       Float
  seatsFilled Int        @default(0)
  totalSeats  Int
  bookings    Booking[]
}

model Booking {
  id          Int           @id @default(autoincrement())
  show        Show          @relation(fields: [showId], references: [id])
  showId      Int
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  seatsBooked Int
  status      BookingStatus @default(CONFIRMED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}